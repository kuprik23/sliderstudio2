// JavaScript code for the updated layout and functionality using Three.js

// DOM Elements
const buttons = document.querySelectorAll('.button');
const slidersContainer = document.querySelector('.sliders');
const aiSelect = document.getElementById('ai-select');
const rigSelect = document.getElementById('rig-select');
const outputSelect = document.getElementById('output-select');
const codeLanguageSelect = document.getElementById('code-language');
const generateButton = document.getElementById('generate-button');
const errorMessage = document.getElementById('error-message');
const generatedCode = document.getElementById('generated-code');
const codeWindow = document.querySelector('.code-window');
const canvasContainer = document.querySelector('.canvas-container');

// Three.js variables
let scene, camera, renderer, cube;
const cubeRotation = { x: 0, y: 0, z: 0 };

// Data
const sections = {
    HEAD: 'Head Content',
    FACE: 'Face Content',
    BODY: 'Body Content',
    'HAND/LEGS': 'Hand/Legs Content',
    'FEET/HANDS': 'Feet/Hands Content',
    CLOTHES: 'Clothes Content',
};

const rigOptions = ['Rig Option 1', 'Rig Option 2', 'Rig Option 3'];
const outputOptions = ['Output Option 1', 'Output Option 2', 'Output Option 3'];

// Event Listeners
buttons.forEach((button) => {
    button.addEventListener('click', () => handleButtonClick(button.dataset.section));
});

generateButton.addEventListener('click', generateCode);

// Initialize Three.js
init();

function init() {
    scene = new THREE.Scene();
    camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);

    renderer = new THREE.WebGLRenderer({ canvas: document.getElementById('cube-canvas') });
    renderer.setSize(canvasContainer.clientWidth, canvasContainer.clientHeight);

    const geometry = new THREE.BoxGeometry();
    const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });
    cube = new THREE.Mesh(geometry, material);
    scene.add(cube);

    camera.position.z = 5;
}

function animate() {
    requestAnimationFrame(animate);

    cube.rotation.x += 0.01;
    cube.rotation.y += 0.01;

    renderer.render(scene, camera);
}

animate();

// Functions
function handleButtonClick(section) {
    // Clear previous selections and content
    slidersContainer.innerHTML = '';

    // Create sliders based on the selected section
    for (let i = 1; i <= 9; i++) {
        const slider = document.createElement('input');
        slider.type = 'range';
        slider.min = '0';
        slider.max = '100';
        slider.value = '50';
        slider.addEventListener('input', () => handleSliderChange());
        slidersContainer.appendChild(slider);
    }

    // Move the buttons above the sliders
    buttons.forEach((button) => {
        button.style.transform = 'translateY(0)';
    });
}

function handleSliderChange() {
    // Update cube rotation based on slider values
    cube.rotation.x = slidersContainer.children[0].value / 50;
    cube.rotation.y = slidersContainer.children[1].value / 50;
    cube.rotation.z = slidersContainer.children[2].value / 50;
}

function generateCode() {
    const selectedAI = aiSelect.value;
    const selectedRig = rigSelect.value;
    const selectedOutput = outputSelect.value;
    const selectedLanguage = codeLanguageSelect.value;

    if (!selectedAI || !selectedRig || !selectedOutput || !selectedLanguage) {
        // Show an error message and return if any selection is missing
        errorMessage.style.display = 'block';
        return;
    }

    // Generate code based on selections
    const code = `
    // Code generated by Emersa Studio
    AI: ${selectedAI}
    Rig: ${selectedRig}
    Output: ${selectedOutput}
    Language: ${selectedLanguage}
    // Add more code generation logic here
  `;

    generatedCode.innerText = code;
    errorMessage.style.display = 'none';

    // Show the code window
    codeWindow.style.display = 'block';
}

// Initialize rig and output selects
rigOptions.forEach((option) => {
    const rigOption = document.createElement('option');
    rigOption.value = option;
    rigOption.textContent = option;
    rigSelect.appendChild(rigOption);
});

outputOptions.forEach((option) => {
    const outputOption = document.createElement('option');
    outputOption.value = option;
    outputOption.textContent = option;
    outputSelect.appendChild(outputOption);
});

// Default section selection
handleButtonClick('HEAD');
